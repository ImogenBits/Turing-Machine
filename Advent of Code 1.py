from TuringMachine import TM, Dir, Special

# formats input into one suitable for the TM
# honestly kinda cheating since recognising Unicode
# would've been much harder than this
def transformInput(inputList):
    res = ""
    for line in inputList:
        res += "#" + "{:b}".format(int(line.strip()))
    return [c for c in res[1:]]

# making things easier to type
L, N, R = Dir.L, Dir.N, Dir.R
X = Special.X
H = "#"
B, A, S1, S2, P0, P1, C, M0, M1, MA = "B", "A", "S1", "S2", "P0", "P1", "C", "M0", "M1", "MA"
numStates = 78

# data that defines the TM
states = {i for i in range(numStates)}
sigma = {"0", "1", H}
gamma = sigma.union({B, A, S1, S2, P0, P1, C, M0, M1, MA})
final = {51, 73}
delta = {
     0:{X: (X, L, 1)},
     1:{X: (S1, L, 2)},
     2:{X: (A, R, 3)},
     3:{X: (X, R, 3),
        H: (S2, R, 4)},
     4:{0: (0, R, 4),
        1: (1, R, 4),
        H: (H, L, 5),
        B: (B, L, 5),
        P0:(0, L, 5),
        P1:(1, L, 5)},
     5:{0: (P0, L, 6),
        1: (P1, L, 12),
        S2:(S2, L, 74)},
     6:{X: (X, L, 6),
        S1:(S1, R, 7)},
     7:{0: (0, R, 7),
        1: (1, R, 7),
        H: (H, L, 8),
        S2:(S2, L, 8),
        P0:(0, L, 8),
        P1:(1, L, 8)},
     8:{0: (P0, L, 9),
        1: (P1, L, 11),
        S1: (S1, L, 25)},
     9:{X: (X, L, 9),
        B: (0, R, 10),
        C: (1, R, 10)},
    10:{X: (X, R, 10),
        S2: (S2, R, 4)},
    11:{X: (X, L, 11),
        B: (1, R, 10),
        C: (0, L, 16)},
    12:{X: (X, L, 12),
        S1: (S1, R, 13)},
    13:{0: (0, R, 13),
        1: (1, R, 13),
        H: (H, L, 14),
        S2: (S2, L, 14),
        P0: (0, L, 14),
        P1: (1, L, 14)},
    14:{0: (P0, L, 11),
        1: (P1, L, 15),
        S1: (S1, L, 26)},
    15:{X: (X, L, 15),
        B: (0, L, 16),
        C: (1, L, 16)},
    16:{B: (C, R, 10)},
    17:{0: (0, R, 17),
        1: (1, R, 17),
        H: (H, L, 18),
        S2: (S2, L, 18),
        P0: (0, L, 18),
        P1: (1, L, 18)},
    18:{0: (P0, L, 19),
        1: (P1, L, 20),
        S1: (S1, L, 29)},
    19:{X: (X, L, 19),
        B: (0, R, 21),
        C: (1, R, 21)},
    20:{X: (X, L, 20),
        B: (1, R, 21),
        C: (0, L, 22)},
    21:{X: (X, R, 21),
        S1: (S1, R, 17)},
    22:{B: (1, R, 21)},
    23:{0: (0, R, 23),
        1: (1, R, 23),
        H: (H, L, 24),
        B: (B, L, 24),
        P0: (0, L, 24),
        P1: (1, L, 24)},
    24:{0: (P0, L, 25),
        1: (P1, L, 26),
        S2: (S2, L, 29)},
    25:{X: (X, L, 25),
        B: (0, R, 27),
        C: (1, R, 27)},
    26:{X: (X, L, 26),
        B: (1, R, 27),
        C: (0, L, 28)},
    27:{X: (X, R, 27),
        S2: (S2, R, 23)},
    28:{B: (1, R, 27)},
    29:{X: (X, L, 29),
        A: (A, L, 30)},
    30:{0: (0, L, 31),
        X: (X, L, 75)},
    31:{0: (0, L, 32),
        X: (X, L, 75)},
    32:{1: (1, L, 33),
        X: (X, L, 75)},
    33:{0: (0, L, 34),
        X: (X, L, 75)},
    34:{0: (0, L, 35),
        X: (X, L, 75)},
    35:{1: (1, L, 36),
        X: (X, L, 75)},
    36:{1: (1, L, 37),
        X: (X, L, 75)},
    37:{1: (1, L, 38),
        X: (X, L, 75)},
    38:{1: (1, L, 39),
        X: (X, L, 75)},
    39:{1: (1, L, 40),
        X: (X, L, 75)},
    40:{1: (1, L, 41),
        X: (X, L, 75)},
    41:{0: (0, L, 41),
        B: (B, R, 43),
        X: (X, L, 75)},
    43:{X: (B, R, 43),
        A: (MA, L, 44)},
    44:{B: (P0, R, 52)},
    45:{X: (X, L, 45),
        B: (B, R, 46)},
    46:{X: (B, R, 46),
        A: (A, R, 47)},
    47:{X: (X, R, 47),
        S2: (H, R, 48)},
    48:{X: (X, R, 48),
        B: (B, L ,49),
        H: (S2, R, 4)},
    49:{X: (X, L, 49),
        S1: (H, R, 50)},
    50:{X: (X, R, 50),
        H: (S1, R, 48),
        B: (B, R, 51)},
    51:{},
    52:{X: (X, R, 52),
        S2: (S2, R, 53)},
    53:{0: (0, R, 53),
        1: (1, R, 53),
        H: (H, L, 54),
        B: (B, L, 54),
        P0: (0, L, 54),
        P1: (1, L, 54)},
    54:{0: (P0, L, 55),
        1: (P1, L, 58),
        S2: (S2, L, 72)},
    55:{X: (X, L, 55),
        M0: (0, L, 56),
        M1: (1, L, 56),
        MA: (A, L, 56)},
    56:{P0: (M0, L, 57),
        P1: (M1, L, 57)},
    57:{0: (P0, R, 52),
        1: (P1, R, 52),
        B: (P0, R, 52)},
    58:{X: (X, L, 58),
        S1: (S1, R, 59)},
    59:{0: (0, R, 59),
        1: (1, R, 59),
        X: (X, L, 60),
        P0: (0, L, 60),
        P1: (1, L, 60)},
    60:{0: (P0, L, 61),
        1: (P1, L, 65),
        S1: (S1, L, 68)},
    61:{X: (X, L, 61),
        A: (A, L, 62),
        MA: (MA, L, 62)},
    62:{X: (X, L, 62),
        P0: (0, L, 63),
        P1: (1, L, 63)},
    63:{0: (P0, R, 64),
        1: (P1, R, 64),
        B: (P0, R, 64)},
    64:{X: (X, R, 64),
        S1: (S1, R, 59)},
    65:{X: (X, L, 65),
        A: (A, L, 66),
        MA: (MA, L, 66)},
    66:{X: (X, L, 66),
        P0: (1, L, 67),
        P1: (0, L, 76)},
    67:{0: (P0, R, 64),
        1: (P1, R, 64),
        B: (P0, R, 64)},
    68:{X: (X, L, 68),
        P0: (0, R, 69),
        P1: (1, R, 69)},
    69:{X: (X, R, 69),
        M0: (0, L, 70),
        M1: (1, L, 70),
        MA: (A, L, 70)},
    70:{0: (M0, L, 71),
        1: (M1, L, 71)},
    71:{0: (P0, R, 52),
        1: (P1, R, 52)},
    72:{X: (X, L, 72),
        MA: (B, L, 72),
        A: (B, L, 72),
        P0: (0, L, 72),
        P1: (1, L, 72),
        M0: (0, L, 72),
        M1: (1, L, 72),
        B: (B, R, 73)},
    73:{},
    74:{X: (X, L, 74),
        S1: (S1, R, 17)},
    75:{X: (X, L, 45)},
    76:{1: (P0, L, 77),
        0: (P1, R, 64),
        B: (P1, R, 64)},
    77:{1: (0, L, 77),
        0: (1, R, 64),
        B: (1, R, 64)}
}

tm = TM(states, gamma, B, sigma, 0, final, delta)

inputWord = []

with open("test big input.txt", "r") as f:
    inputWord = transformInput(f.readlines())

res = tm(inputWord, True)

print("START")
print(res)
print(int(res, 2) if res != "" else "")
print("END")